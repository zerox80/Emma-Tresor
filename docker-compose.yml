services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      DB_VENDOR: ${DB_VENDOR}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      DJANGO_STATIC_ROOT: /vol/web/static
      DJANGO_MEDIA_ROOT: /vol/web/media
      DJANGO_PRIVATE_MEDIA_ROOT: /vol/web/private_media
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - backend_media:/vol/web/media
      - backend_static:/vol/web/static
      - backend_private_media:/vol/web/private_media
    expose:
      - "8000"

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    restart: unless-stopped
    env_file: .env
    depends_on:
      - backend
    ports:
      - "8888:80"
    volumes:
      - backend_static:/var/www/emmatresor/static
      - backend_media:/var/www/emmatresor/media

volumes:
  postgres_data:
  backend_static:
  backend_media:
  backend_private_media:
